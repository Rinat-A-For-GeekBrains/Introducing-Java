//public class Seminar_5 {
//    üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//    –î–∞–Ω—ã 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç true, –µ—Å–ª–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã–º–∏ –∏ false, –µ—Å–ª–∏ –Ω–µ—Ç. –°—Ç—Ä–æ–∫–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã, –µ—Å–ª–∏ –æ–¥–Ω—É –±—É–∫–≤—É –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±—É–∫–≤—É –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª–æ–≤–µ, –ø—Ä–∏ —ç—Ç–æ–º
//
//1. –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±—É–∫–≤—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä, add - egg –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã)
//            2. –±—É–∫–≤–∞ –º–æ–∂–µ—Ç –Ω–µ –º–µ–Ω—è—Ç—å—Å—è, –∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–∫–æ–π –∂–µ. (–ù–∞–ø—Ä–∏–º–µ—Ä, note - code)
//
//    –ü—Ä–∏–º–µ—Ä 1:
//
//    Input: s = "foo", t = "bar"
//
//    Output: false
//
//    –ü—Ä–∏–º–µ—Ä 2:
//
//    Input: s = "paper", t = "title"
//
//    Output: true
//
//</aside>
//    –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–¥—ã :)
//    DALER DADADZHANOV +
//    –ê—Ä—Ö–∏–ø –ß–∏–∂–∞–Ω–æ–≤ static boolean task1(String str1, String str2){
// <aside>
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
// –î–∞–Ω—ã 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç true, –µ—Å–ª–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã–º–∏ –∏ false, –µ—Å–ª–∏ –Ω–µ—Ç.
// –°—Ç—Ä–æ–∫–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã, –µ—Å–ª–∏ –æ–¥–Ω—É –±—É–∫–≤—É –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±—É–∫–≤—É –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª–æ–≤–µ, –ø—Ä–∏ —ç—Ç–æ–º
//
// 1. –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±—É–∫–≤—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
// (–ù–∞–ø—Ä–∏–º–µ—Ä, add - egg –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã)
// 2. –±—É–∫–≤–∞ –º–æ–∂–µ—Ç –Ω–µ –º–µ–Ω—è—Ç—å—Å—è, –∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–∫–æ–π –∂–µ. (–ù–∞–ø—Ä–∏–º–µ—Ä, note - code)
//
// –ü—Ä–∏–º–µ—Ä 1:
//
// Input: s = "foo", t = "bar"
//
// Output: false
//
// –ü—Ä–∏–º–µ—Ä 2:
//
// Input: s = "paper", t = "title"
//p=t
// a=i
// Output: true
//
// </aside>
//        if (str1.length() != str2.length()) return false;
//        Map<Character, Character> map = new HashMap<>();
//        char[] c1 = str1.toCharArray();
//        char[] c2 = str2.toCharArray();
//        for (int i = 0; i < c1.length; i++) {
//            map.putIfAbsent(c1[i],c2[i]);
//            if(map.containsKey(c1[i])){
//                if(c2[i] != map.get(c1[i])) return false;
//            }
//        }
//        return true;
//    }
//    –ê—Ä—Ö–∏–ø –ß–∏–∂–∞–Ω–æ–≤ private Map<String, String> map = new HashMap<>();
//
//    void add(String lastName, String passNum){
//        map.put(passNum, lastName);
//    }
//
//    String getByLastName(String lastName){
//        StringBuilder sb = new StringBuilder();
//        for (Map.Entry entry:
//                map.entrySet()) {
//            if(entry.getValue().equals(lastName))
//            {
//                sb.append(entry.getKey())
//                        .append(" : ")
//                        .append(lastName)
//                        .append("\n");
//            }
//        }
//        return sb.toString();
//    }
//
//    String getByPassNum(String passNum){
//        return new StringBuilder().append(passNum)
//                .append(" : ")
//                .append(map.get(passNum)).toString();
//    }
//
//    String getAllShort(){
//        return map.toString();
//    }
//    static boolean task2(String str) {
//// <aside>
////üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//// –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.
////
//// –ü—Ä–∏–º–µ—Ä 1: a+(d*3) - –∏—Å—Ç–∏–Ω–∞
////
//// –ü—Ä–∏–º–µ—Ä 2: [a+(1*3) - –ª–æ–∂—å
////
//// –ü—Ä–∏–º–µ—Ä 3: [6+(3*3)] - –∏—Å—Ç–∏–Ω–∞
////
//// –ü—Ä–∏–º–µ—Ä 4: {a}[+]{(d*3)} - –∏—Å—Ç–∏–Ω–∞
////
//// –ü—Ä–∏–º–µ—Ä 5: <{a}+{(d*3)}> - –∏—Å—Ç–∏–Ω–∞
////
//// –ü—Ä–∏–º–µ—Ä 6: {a+]}{(d*3)} - –ª–æ–∂—å
//// (12+2(13*5))
//// </aside>
//
//        Stack<Character> stack = new Stack();
//        Map<Character, Character> hashmap = new HashMap<>();
//        hashmap.put('(', ')');
//        hashmap.put('[', ']');
//        hashmap.put('{', '}');
//        hashmap.put('<', '>');
//        char[] c = str.toCharArray();
//        for (int i = 0; i < c.length; i++) {
//            if (hashmap.containsKey(c[i])) stack.push(c[i]);
//            if (hashmap.containsValue(c[i])) {
//                if (stack.isEmpty() || c[i] != hashmap.get(stack.pop()))
//                    return false;
//            }
//        }
//        if (!(stack.empty())) return false;
//        return true;
//    }
//
//    static void task3(String str){
//// <aside>
////üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//// –í–∑—è—Ç—å –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä,–ú–æ—Ä–æ–∑ –∏ —Å–æ–ª–Ω—Ü–µ –¥–µ–Ω—å —á—É–¥–µ—Å–Ω—ã–π –ï—â–µ —Ç—ã –¥—Ä–µ–º–ª–µ—à—å –¥—Ä—É–≥ –ø—Ä–µ–ª–µ—Å—Ç–Ω—ã–π –ü–æ—Ä–∞ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ –ø—Ä–æ—Å–Ω–∏—Å—å.
////
//// –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–ª–∏–Ω–µ —Å –ø–æ–º–æ—â—å—é TreeMap. –°—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–æ–π –Ω–µ –¥–æ–ª–∂–Ω—ã ‚Äú–ø–æ—Ç–µ—Ä—è—Ç—å—Å—è‚Äù.
////
////</aside>
//        str = str.replace(".", " ");
//        String[] arr = str.split(" ");
//        Map<Integer, List<String>> map = new TreeMap<>(Comparator.reverseOrder());
//        for (String word:
//                arr) {
//            int len = word.length();
//            if(map.containsKey(len)){
//                List<String> list = map.get(len);
//                list.add(word);
//            } else {
//                List<String> list = new ArrayList<>();
//                list.add(word);
//                map.put(len,list);
//            }
//        }
//        System.out.println(map);
//    }
//}
