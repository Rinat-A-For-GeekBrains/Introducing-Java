import java.util.ArrayList;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;

public class Seminar_4 {

    public static void main(String[] args) {
        task1();
    }

    static void task0() {

        //üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//        1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//        2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.


        ArrayList<Integer> list1 = new ArrayList<>();
        LinkedList<Integer> list2 = new LinkedList<>();

        long start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            list1.add(i);
        }
        long midlle = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            list2.add(i);
        }
        long finish = System.currentTimeMillis();

        System.out.println(midlle - start);
        System.out.println(finish - midlle);
    }
    static void task01() {

        //üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//        1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//        2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.
        //        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–¥–µ—Ç —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞ –Ω—É–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é

        ArrayList<Integer> list1 = new ArrayList<>();
        LinkedList<Integer> list2 = new LinkedList<>();

        long start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            list1.add(0,i);
        }
        long midlle = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            list2.add(0,i);
        }
        long finish = System.currentTimeMillis();

        System.out.println(midlle - start);
        System.out.println(finish - midlle);
    }

    static void task1() {

        //        <aside>
        //üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
        //        –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        //
        //        1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞
        //        text~num
        //
        //        1. –ù—É–∂–Ω–æ —Ä–∞—Å—Å–ø–ª–∏—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ ~, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å text –≤ —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é num.
        //        2. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print~num, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ num –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞.
        //</aside>

        LinkedList<String> list = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean work = true;
        while (work) {
            System.out.println("Input string: ");
            String line = scanner.nextLine();
            if (line.equals("exit")) {
                System.out.println("Bye!");
                return;
            }
            String[] arr = line.split("~");
            int num = Integer.parseInt(arr[1]);
            String text = arr[0];
            switch (text) {
                case "print":
                    System.out.println(list.remove(num));
                    break;
                case "exit":
                    System.out.println("Bye!");
                    work = false;
                    break;
                default:
                    list.add(num, text);
                    System.out.println("String added");
            }

        }

    }
    static void task2() {
// **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//        –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
//
//        1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ‚Äú–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç‚Äù —Å—Ç—Ä–æ–∫–∏.
//        2. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–≤–µ–¥–µ–Ω–Ω–∞—è –±—ã–ª–∞ –ø–µ—Ä–≤–æ–π –≤ —Å–ø–∏—Å–∫–µ, –∞ –ø–µ—Ä–≤–∞—è - –ø–æ—Å–ª–µ–¥–Ω–µ–π.
//        3. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ revert, —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏.
//
        LinkedList<String> list = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean work = true;
        while (work) {
            System.out.println("Input string: ");
            String line = scanner.nextLine();
            if (line.equals("exit")) {
                System.out.println("Bye!");
                return;
            }
            switch (line) {
                case "print":
                    ListIterator iterator = list.listIterator(list.size());
                    while (iterator.hasPrevious()) {
                        System.out.println(iterator.previous());
                    }
                    break;
                case "revert":
                    list.removeLast();
                    System.out.println("Element has been deleted");
                    break;
                default:
                    list.add(line);
                    System.out.println("String added");
            }

        }
    }

//–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
//
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ‚Äú–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç‚Äù —Å—Ç—Ä–æ–∫–∏.
// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–≤–µ–¥–µ–Ω–Ω–∞—è –±—ã–ª–∞ –ø–µ—Ä–≤–æ–π –≤ —Å–ø–∏—Å–∫–µ, –∞ –ø–µ—Ä–≤–∞—è
// - –ø–æ—Å–ª–µ–¥–Ω–µ–π.
// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ revert, —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏.


        static void Task_3() {
            LinkedList<String> list = new LinkedList<>();
            Scanner scanner = new Scanner(System.in);
            boolean work = true;
            while (work) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É : ");
                String line = scanner.nextLine();

                switch (line) {
                    case "print":
                        for (int i = list.size() - 1; i >= 0; i--) {
                            System.out.println(list.get(i));
                        }
                        break;
                    case "revert":
                        list.removeLast();
                        break;
                    case "exit":
                        System.out.println("–ü–æ–∫–∞! ");
                        work = false;
                        break;
                    default:
                        list.add(line);
                }
            }
        }
    }
// –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:

// 1) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
// –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å—Ç—ç–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—ç–∫–∞.
// 2) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
// –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏.


//    public class Task_4 {
//        public static void main(String[] args) {
//            int[] arr = {2, 3, 5, 8, 9, 12, 14, 16, 22, 23};
//            Stack<Integer> stack = new Stack<>();
//            Queue<Integer> queue = new LinkedList<Integer>();
//            for (int i = 0; i < arr.length; i++) {
//                stack.push(arr[i]);
//                queue.add(arr[i]);
//            }
//            while (!stack.isEmpty()) {
//                System.out.print(stack.pop());
//                System.out.print("\t");
//                System.out.println(queue.poll());
//
//            }
//
//        }
//    }
////
//    public class MyStack {
//        //    <aside>
//        //üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//        //    –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—ç–∫ —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Å–∏–≤–∞. –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã:
//        //
//        //    size(), empty(), push(), peek(), pop().
//        //
//        //</aside>
//        private Integer[] arr = new Integer[16];
//        private int size = 0;
//
//        int size() {
//            return size;
//        }
//
//        boolean empty() {
//            return size == 0;
//        }
//
//        void push(int item) {
//            if (size == arr.length) {
//                Integer[] tempArr = new Integer[arr.length * 2];
//                System.arraycopy(arr, 0, tempArr, 0, arr.length);
//                arr = tempArr;
//            }
//            arr[size++] = item;
//        }
//
//        int peek() {
//            return arr[size - 1];
//        }
//
//        // 1 11 3 4 7
//        int pop() {
//            return arr[--size];
//        }
//
//
//    }
//
//            if(a.length>1)
//
//    {
//        int pivot = a.length / 2;
//        int[] left = Arrays.copyOfRange(a, 0, pivot);
//        int[] right = Arrays.copyOfRange(a, pivot, a.length);
//        mergeSort(left);
//        mergeSort(right);
//        int i = 0;
//        int j = 0;
//        int k = 0;
//        while (i < left.length && j < right.length) {
//            if (left[i] < right[j]) {
//                a[k++] = left[i++];
//            } else {
//                a[k++] = right[j++];
//            }
//        }
//        while (i < left.length) {
//            a[k++] = left[i++];
//        }
//        while (j < right.length) {
//            a[k++] = right[j++];
//        }
//
//
//    }
//        return a;

//public class MyStack {
    // <aside>
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—ç–∫ —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Å–∏–≤–∞. –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã:
//
// size(), empty(), push(), peek(), pop().
//
////</aside>
//    private Integer[] arr = new Integer[16];
//    private int size = 0;
//
//    int size(){
//        return size;
//    }
//
//    boolean empty(){
//        return size == 0;
//    }
//
//    void push(int item){
//        if (size == arr.length){
//            Integer[] tempArr = new Integer[arr.length * 2];
//            System.arraycopy(arr, 0, tempArr, 0, arr.length);
//            arr = tempArr;
//        }
//        arr[size++] = item;
//    }
//
//    int peek(){
//        return arr[size-1];
//    }
//    // 1 11 3 4 7
//    int pop(){
//        return arr[--size];
//    }
//
//
//}
//if (a.length > 1) {
//        int pivot = a.length / 2;
//        int[] left = Arrays.copyOfRange(a, 0, pivot);
//        int[] right = Arrays.copyOfRange(a, pivot, a.length);
//        mergeSort(left);
//        mergeSort(right);
//        int i = 0;
//        int j = 0;
//        int k = 0;
//        while (i < left.length && j < right.length) {
//        if (left[i] < right[j]) {
//        a[k++] = left[i++];
//        } else {
//        a[k++] = right[j++];
//        } }
//        while (i < left.length) {
//        a[k++] = left[i++];
//        }
//        while (j < right.length) {
//        a[k++] = right[j++];
//        }
//
//
//        }
//        return a;
                    